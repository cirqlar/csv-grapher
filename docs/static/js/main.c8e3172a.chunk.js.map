{"version":3,"sources":["FileSelectPage.js","Graph.js","GraphPage.js","csv.js","App.js","index.js"],"names":["FileSelectPage","props","fileInput","React","useRef","type","ref","accept","onChange","setFile","current","files","color","colors","blue","green","grey","orange","purple","red","yellow","Graph","canvas","useEffect","ctx","data","graph","getContext","Chart","labels","datasets","map","key","index","label","backgroundColor","borderColor","fill","destroy","GraphPage","onClick","clearData","papaPromise","file","config","a","Promise","resolve","reject","Papa","parse","complete","results","fields","meta","formattedResults","i","length","j","push","splice","App","useState","setData","csv","header","dynamicTyping","then","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yJAiBeA,MAff,SAAwBC,GACtB,IAAMC,EAAYC,IAAMC,SAEzB,OACC,8BACI,2BACEC,KAAK,OACLC,IAAKJ,EACLK,OAAO,YACPC,SAAU,kBAAMP,EAAMQ,QAAQP,EAAUQ,QAAQC,MAAM,S,gBCR1DC,EAAQ,CAAC,OAAQ,QAAS,OAAQ,SAAU,SAAU,MAAO,UAC7DC,EAAS,CACXC,KAAM,oBACNC,MAAO,oBACPC,KAAM,qBACNC,OAAQ,oBACRC,OAAQ,qBACRC,IAAK,oBACLC,OAAQ,qBAqCKC,MAbf,SAAepB,GACb,IAAIqB,EAASnB,IAAMC,SAOnB,OALAD,IAAMoB,WAAU,WACd,IAvBiBC,EAAKC,EAuBlBC,GAvBaF,EAuBOF,EAAOZ,QAAQiB,WAAW,MAvB5BF,EAuBmCxB,EAAMwB,KAtBrD,IAAIG,IAAMJ,EAAK,CACzBnB,KAAM,OACNoB,KAAM,CACJI,OAAQJ,EAAI,QACZK,SAAUL,EAAI,MAAUM,KAAI,SAACC,EAAKC,GAChC,MAAO,CACLC,MAAOF,EACPG,gBAAiBtB,EAAOD,EAAMqB,IAC9BG,YAAavB,EAAOD,EAAMqB,IAC1BR,KAAMA,EAAKO,GACXK,MAAM,UAaZ,OAAO,kBAAMX,EAAMY,cAInB,4BAAQhC,IAAKgB,KChCFiB,MATf,SAAmBtC,GACjB,OACE,oCACE,4BAAQuC,QAASvC,EAAMwC,WAAvB,cACA,kBAAC,EAAD,CAAOhB,KAAMxB,EAAMwB,S,uDCLViB,E,gFAAf,WAA2BC,EAAMC,GAAjC,SAAAC,EAAA,+EACS,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,IAAKC,MAAMP,EAAX,aACEQ,SAAUJ,GACPH,QAJT,4C,kEASO,WAAqBD,EAAMC,GAA3B,yBAAAC,EAAA,sEACiBH,EAAYC,EAAMC,GADnC,OACCQ,EADD,OAEC3B,EAAO2B,EAAQ3B,KACf4B,EAASD,EAAQE,KAAKD,OAEtBE,EAAmB,CACvB,QAAW,IAGJC,EAAI,EATR,YASWA,EAAI/B,EAAKgC,OAAS,GAT7B,iBAUMC,EAAI,EAVV,YAUaA,EAAIL,EAAOI,QAVxB,oBAWS,IAAND,GAAiB,IAANE,EAXd,wBAYCH,EAAiBF,EAAOK,IAAM,CAAEjC,EAAK+B,GAAGH,EAAOK,KAZhD,mCAeS,IAANA,EAfH,wBAgBCH,EAAgB,QAAYI,KAAKlC,EAAK+B,GAAGH,EAAOK,KAhBjD,gCAmBS,IAANF,GAAiB,IAANE,GACbH,EAAiBF,EAAOK,IAAIC,KAAKlC,EAAK+B,GAAGH,EAAOK,KApBjD,QAUgCA,IAVhC,uBASgCF,IAThC,8BAyBLD,EAAgB,MAAYF,EAAOO,OAAO,GAzBrC,kBA2BEL,GA3BF,6C,sBCqBQM,MA1Bf,WAAgB,IAAD,EACW1D,IAAM2D,WADjB,mBACNnB,EADM,KACAlC,EADA,OAEWN,IAAM2D,WAFjB,mBAENrC,EAFM,KAEAsC,EAFA,KAqBb,OAjBA5D,IAAMoB,WAAU,WACVoB,GDAD,SAAP,oCCCMqB,CAAUrB,EAAM,CAAEsB,QAAQ,EAAMC,eAAe,IAC5CC,MAAK,SAAAf,GACJW,EAAQX,QAGb,CAACT,IAMJxC,IAAMoB,WAAU,WACd6C,QAAQC,IAAI5C,KACX,CAACA,IAGFA,EAAO,kBAAC,EAAD,CAAWA,KAAMA,EAAMgB,UAThC,WACEsB,EAAQ,SAQiD,kBAAC,EAAD,CAAgBtD,QAASA,KCxBtF6D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.c8e3172a.chunk.js","sourcesContent":["import React from 'react';\n\nfunction FileSelectPage(props) {\n  const fileInput = React.useRef();\n\n\treturn (\n\t\t<form>\n      <input \n        type='file' \n        ref={fileInput} \n        accept=\".csv,.txt\" \n        onChange={() => props.setFile(fileInput.current.files[0])}\n      />\n    </form>\n\t);\n}\n\nexport default FileSelectPage;","import React from 'react';\nimport Chart from 'chart.js';\n\nlet color = [\"blue\", \"green\", \"grey\", \"orange\", \"purple\", \"red\", \"yellow\"];\nlet colors = {\n  blue: \"rgb(54, 162, 235)\",\n  green: \"rgb(75, 192, 192)\",\n  grey: \"rgb(201, 203, 207)\",\n  orange: \"rgb(255, 159, 64)\",\n  purple: \"rgb(153, 102, 255)\",\n  red: \"rgb(255, 99, 132)\",\n  yellow: \"rgb(255, 205, 86)\",\n}\n\n\n\nfunction createChart(ctx, data) {\n  let graph = new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: data['_labels'],\n      datasets: data['_keys'].map((key, index) => {\n        return {\n          label: key,\n          backgroundColor: colors[color[index]],\n          borderColor: colors[color[index]],\n          data: data[key],\n          fill: false,\n        };\n      }),\n    },\n  });\n  return graph  \n}\n\nfunction Graph(props) {\n  let canvas = React.useRef();\n\n  React.useEffect(() => {\n    let graph = createChart(canvas.current.getContext('2d'), props.data);\n    return () => graph.destroy();\n  })\n\n  return (\n    <canvas ref={canvas}></canvas>\n  );\n}\n\nexport default Graph;","import React from 'react';\nimport Graph from './Graph';\n\nfunction GraphPage(props) {\n  return (\n    <>\n      <button onClick={props.clearData}>Clear Data</button>\n      <Graph data={props.data} />\n    </>\n  );\n}\n\nexport default GraphPage;","import Papa from 'papaparse';\n\nasync function papaPromise(file, config) {\n  return new Promise((resolve, reject) => {\n    Papa.parse(file, {\n      complete: resolve,\n      ...config\n    });\n  });\n}\n\nexport async function parse(file, config) {\n  const results = await papaPromise(file, config);\n  const data = results.data;\n  const fields = results.meta.fields;\n\n  const formattedResults = {\n    '_labels': [],\n  };\n\n  for (let i = 0; i < data.length - 1; i++) {\n    for (let j = 0; j < fields.length; j++) { \n      if (i === 0 && j !== 0) {\n        formattedResults[fields[j]] = [ data[i][fields[j]] ];\n        continue;\n      }\n      if (j === 0) {\n        formattedResults['_labels'].push(data[i][fields[j]]);\n        continue;\n      }\n      if (i !== 0 && j !== 0) {\n        formattedResults[fields[j]].push(data[i][fields[j]]);\n      }\n    }\n  }\n\n  formattedResults['_keys'] = fields.splice(1);\n\n  return formattedResults;\n}\n\n","import React from 'react';\n\nimport FileSelectPage from \"./FileSelectPage\";\nimport GraphPage from './GraphPage';\nimport * as csv from './csv';\n\nfunction App() {\n  const [file, setFile] = React.useState();\n  const [data, setData] = React.useState();\n\n  React.useEffect(() => {\n    if (file) {\n      csv.parse(file, { header: true, dynamicTyping: true })\n        .then(results => {\n          setData(results);\n        })\n    }\n  }, [file]);\n\n  function clearData() {\n    setData(null);\n  }\n\n  React.useEffect(() => {\n    console.log(data);\n  }, [data]);\n\n  return (\n    data ? <GraphPage data={data} clearData={clearData} /> : <FileSelectPage setFile={setFile} />\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App></App>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}