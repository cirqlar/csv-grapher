{"version":3,"sources":["FileSelectPage.js","GraphPage.js","csv.js","App.js","index.js"],"names":["FileSelectPage","props","fileInput","React","useRef","type","ref","accept","onChange","setFile","current","files","GraphPage","onClick","clearData","JSON","stringify","data","papaPromise","file","config","a","Promise","resolve","reject","Papa","parse","complete","results","fields","meta","formattedResults","i","length","j","push","App","useState","setData","useEffect","csv","header","dynamicTyping","then","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yJAiBeA,MAff,SAAwBC,GACtB,IAAMC,EAAYC,IAAMC,SAEzB,OACC,8BACI,2BACEC,KAAK,OACLC,IAAKJ,EACLK,OAAO,YACPC,SAAU,kBAAMP,EAAMQ,QAAQP,EAAUQ,QAAQC,MAAM,SCA/CC,MATf,SAAmBX,GACjB,OACE,oCACE,4BAAQY,QAASZ,EAAMa,WAAvB,cACA,6BAAOC,KAAKC,UAAUf,EAAMgB,KAAM,KAAM,M,uDCJ/BC,E,gFAAf,WAA2BC,EAAMC,GAAjC,SAAAC,EAAA,+EACS,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,IAAKC,MAAMP,EAAX,aACEQ,SAAUJ,GACPH,QAJT,4C,kEASO,WAAqBD,EAAMC,GAA3B,yBAAAC,EAAA,sEACiBH,EAAYC,EAAMC,GADnC,OAOL,IANMQ,EADD,OAECX,EAAOW,EAAQX,KACfY,EAASD,EAAQE,KAAKD,OAEtBE,EAAmB,GAEhBC,EAAI,EAAGA,EAAIf,EAAKgB,SAAUD,EACjC,IAASE,EAAI,EAAGA,EAAIL,EAAOI,SAAUC,EACzB,IAANF,IACFD,EAAiBF,EAAOK,IAAM,CAAEjB,EAAKe,GAAGH,EAAOK,MAEjDH,EAAiBF,EAAOK,IAAIC,KAAKlB,EAAKe,GAAGH,EAAOK,KAZ/C,yBAgBEH,GAhBF,4C,sBCqBQK,MA1Bf,WAAgB,IAAD,EACWjC,IAAMkC,WADjB,mBACNlB,EADM,KACAV,EADA,OAEWN,IAAMkC,WAFjB,mBAENpB,EAFM,KAEAqB,EAFA,KAqBb,OAjBAnC,IAAMoC,WAAU,WACVpB,GDAD,SAAP,oCCCMqB,CAAUrB,EAAM,CAAEsB,QAAQ,EAAMC,eAAe,IAC5CC,MAAK,SAAAf,GACJU,EAAQV,QAGb,CAACT,IAMJhB,IAAMoC,WAAU,WACdK,QAAQC,IAAI5B,KACX,CAACA,IAGFA,EAAO,kBAAC,EAAD,CAAWA,KAAMA,EAAMH,UAThC,WACEwB,EAAQ,SAQiD,kBAAC,EAAD,CAAgB7B,QAASA,KCxBtFqC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.475539b8.chunk.js","sourcesContent":["import React from 'react';\n\nfunction FileSelectPage(props) {\n  const fileInput = React.useRef();\n\n\treturn (\n\t\t<form>\n      <input \n        type='file' \n        ref={fileInput} \n        accept=\".csv,.txt\" \n        onChange={() => props.setFile(fileInput.current.files[0])}\n      />\n    </form>\n\t);\n}\n\nexport default FileSelectPage;","import React from 'react';\n\nfunction GraphPage(props) {\n  return (\n    <>\n      <button onClick={props.clearData}>Clear Data</button>\n      <pre>{ JSON.stringify(props.data, null, 2) }</pre>\n    </>\n  );\n}\n\nexport default GraphPage;","import Papa from 'papaparse';\n\nasync function papaPromise(file, config) {\n  return new Promise((resolve, reject) => {\n    Papa.parse(file, {\n      complete: resolve,\n      ...config\n    });\n  });\n}\n\nexport async function parse(file, config) {\n  const results = await papaPromise(file, config);\n  const data = results.data;\n  const fields = results.meta.fields;\n\n  const formattedResults = {};\n\n  for (let i = 0; i < data.length; ++i) {\n    for (let j = 0; j < fields.length; ++j) {\n      if (i === 0) {\n        formattedResults[fields[j]] = [ data[i][fields[j]] ]\n      }\n      formattedResults[fields[j]].push(data[i][fields[j]]);\n    }\n  }\n\n  return formattedResults;\n}\n\n","import React from 'react';\n\nimport FileSelectPage from \"./FileSelectPage\";\nimport GraphPage from './GraphPage';\nimport * as csv from './csv';\n\nfunction App() {\n  const [file, setFile] = React.useState();\n  const [data, setData] = React.useState();\n\n  React.useEffect(() => {\n    if (file) {\n      csv.parse(file, { header: true, dynamicTyping: true })\n        .then(results => {\n          setData(results);\n        })\n    }\n  }, [file]);\n\n  function clearData() {\n    setData(null);\n  }\n\n  React.useEffect(() => {\n    console.log(data);\n  }, [data]);\n\n  return (\n    data ? <GraphPage data={data} clearData={clearData} /> : <FileSelectPage setFile={setFile} />\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App></App>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}